
Matrix_kbd_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000085f  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bb  00000000  00000000  00000af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000442  00000000  00000000  000011ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a2  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023d  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001c37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2c 00 	jmp	0x58	; 0x58 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	10 20       	and	r1, r0
  56:	40 80       	ld	r4, Z

00000058 <__ctors_end>:
  58:	11 24       	eor	r1, r1
  5a:	1f be       	out	0x3f, r1	; 63
  5c:	cf e5       	ldi	r28, 0x5F	; 95
  5e:	d8 e0       	ldi	r29, 0x08	; 8
  60:	de bf       	out	0x3e, r29	; 62
  62:	cd bf       	out	0x3d, r28	; 61

00000064 <__do_clear_bss>:
  64:	20 e0       	ldi	r18, 0x00	; 0
  66:	a0 e6       	ldi	r26, 0x60	; 96
  68:	b0 e0       	ldi	r27, 0x00	; 0
  6a:	01 c0       	rjmp	.+2      	; 0x6e <.do_clear_bss_start>

0000006c <.do_clear_bss_loop>:
  6c:	1d 92       	st	X+, r1

0000006e <.do_clear_bss_start>:
  6e:	a1 36       	cpi	r26, 0x61	; 97
  70:	b2 07       	cpc	r27, r18
  72:	e1 f7       	brne	.-8      	; 0x6c <.do_clear_bss_loop>
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
    /* Replace with your application code */
	
	
	DDRA =0xF0;
  80:	80 ef       	ldi	r24, 0xF0	; 240
  82:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
  84:	8f e0       	ldi	r24, 0x0F	; 15
  86:	8b bb       	out	0x1b, r24	; 27
	
	//set_DDR('A');
	//Ledy
	DDRB =0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	87 bb       	out	0x17, r24	; 23
	PORTB =0xFF;
  8c:	88 bb       	out	0x18, r24	; 24
	// ja wiem ze te literki chwilowo nic nie zmieniaja
    while (1) 
    {
		PORTB = get_key('D', 'A');
  8e:	61 e4       	ldi	r22, 0x41	; 65
  90:	84 e4       	ldi	r24, 0x44	; 68
  92:	0e 94 61 00 	call	0xc2	; 0xc2 <get_key>
  96:	88 bb       	out	0x18, r24	; 24
  98:	fa cf       	rjmp	.-12     	; 0x8e <main+0xe>

0000009a <translate>:
	}


int8_t translate(int8_t key_code){
	
	switch(key_code)
  9a:	8b 30       	cpi	r24, 0x0B	; 11
  9c:	51 f0       	breq	.+20     	; 0xb2 <translate+0x18>
  9e:	1c f4       	brge	.+6      	; 0xa6 <translate+0xc>
  a0:	87 30       	cpi	r24, 0x07	; 7
  a2:	49 f0       	breq	.+18     	; 0xb6 <translate+0x1c>
  a4:	0a c0       	rjmp	.+20     	; 0xba <translate+0x20>
  a6:	8d 30       	cpi	r24, 0x0D	; 13
  a8:	51 f0       	breq	.+20     	; 0xbe <translate+0x24>
  aa:	8e 30       	cpi	r24, 0x0E	; 14
  ac:	31 f4       	brne	.+12     	; 0xba <translate+0x20>
	{
		case 0b00001110:
			return 0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	08 95       	ret
		case 0b00001101:
			return 1;
		case 0b00001011:
			return 2;
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	08 95       	ret
		case 0b00000111:
			return 3;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	08 95       	ret
		default:
			return 16;
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	08 95       	ret
	switch(key_code)
	{
		case 0b00001110:
			return 0;
		case 0b00001101:
			return 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
		default:
			return 16;
	}
	return 16;
	
  c0:	08 95       	ret

000000c2 <get_key>:
}

int8_t get_key(const char typ, const char port_name)
{	int port,dir;
	
	switch(port_name)
  c2:	62 34       	cpi	r22, 0x42	; 66
  c4:	61 f0       	breq	.+24     	; 0xde <get_key+0x1c>
  c6:	18 f4       	brcc	.+6      	; 0xce <get_key+0xc>
  c8:	61 34       	cpi	r22, 0x41	; 65
  ca:	31 f0       	breq	.+12     	; 0xd8 <get_key+0x16>
  cc:	10 c0       	rjmp	.+32     	; 0xee <get_key+0x2c>
  ce:	63 34       	cpi	r22, 0x43	; 67
  d0:	49 f0       	breq	.+18     	; 0xe4 <get_key+0x22>
  d2:	64 34       	cpi	r22, 0x44	; 68
  d4:	51 f0       	breq	.+20     	; 0xea <get_key+0x28>
  d6:	0b c0       	rjmp	.+22     	; 0xee <get_key+0x2c>
	{
		case 'A':
		port=PINA;
  d8:	29 b3       	in	r18, 0x19	; 25
		dir=DDRA;
  da:	9a b3       	in	r25, 0x1a	; 26
		break;
  dc:	08 c0       	rjmp	.+16     	; 0xee <get_key+0x2c>
		
		case 'B':
		port=PINB;
  de:	26 b3       	in	r18, 0x16	; 22
		dir=DDRB;
  e0:	97 b3       	in	r25, 0x17	; 23
		break;
  e2:	05 c0       	rjmp	.+10     	; 0xee <get_key+0x2c>
		
		case 'C':
		port=PINC;
  e4:	23 b3       	in	r18, 0x13	; 19
		dir=DDRC;
  e6:	94 b3       	in	r25, 0x14	; 20
		break;
  e8:	02 c0       	rjmp	.+4      	; 0xee <get_key+0x2c>
		
		case 'D':
		port=PIND;
  ea:	20 b3       	in	r18, 0x10	; 16
		dir=DDRD;
  ec:	91 b3       	in	r25, 0x11	; 17
		break;
	}
	
	if (typ=='M' || typ=='m')
  ee:	8d 34       	cpi	r24, 0x4D	; 77
  f0:	11 f0       	breq	.+4      	; 0xf6 <get_key+0x34>
  f2:	8d 36       	cpi	r24, 0x6D	; 109
  f4:	71 f5       	brne	.+92     	; 0x152 <get_key+0x90>
		{
		int8_t temp = 0x0F & port;
				temp =  translate(temp);
  f6:	82 2f       	mov	r24, r18
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	0e 94 4d 00 	call	0x9a	; 0x9a <translate>
				if(temp !=16)
  fe:	80 31       	cpi	r24, 0x10	; 16
 100:	69 f5       	brne	.+90     	; 0x15c <get_key+0x9a>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	27 c0       	rjmp	.+78     	; 0x156 <get_key+0x94>
	*/
			static uint8_t licznik; //nr_kolumny tez inaczej
		for(int i=0;i<8;i++)
		{
		
		uint8_t pin =  PINA | 0xF0;
 108:	89 b3       	in	r24, 0x19	; 25
 10a:	80 6f       	ori	r24, 0xF0	; 240
		
		
		if (pin < 255) //cos wcisniete
 10c:	8f 3f       	cpi	r24, 0xFF	; 255
 10e:	49 f0       	breq	.+18     	; 0x122 <get_key+0x60>
		{
			
			return  (translate(pin)+1 + 4*licznik); //mo¿e nawet berz tego translate()
 110:	0e 94 4d 00 	call	0x9a	; 0x9a <translate>
 114:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	99 0f       	add	r25, r25
 11a:	99 0f       	add	r25, r25
 11c:	89 0f       	add	r24, r25
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f e1       	ldi	r24, 0x1F	; 31
 124:	9e e4       	ldi	r25, 0x4E	; 78
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <get_key+0x64>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <get_key+0x6a>
 12c:	00 00       	nop
		}

		

		_delay_ms(50);
		if(++licznik > 3) licznik =0;
 12e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	10 f0       	brcs	.+4      	; 0x140 <get_key+0x7e>
 13c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		uint8_t out = pgm_read_byte ( &kolumny [ licznik ] );
 140:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ec 5a       	subi	r30, 0xAC	; 172
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	e4 91       	lpm	r30, Z
		return 4;
		break;
	}
	*/
			static uint8_t licznik; //nr_kolumny tez inaczej
		for(int i=0;i<8;i++)
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	02 c0       	rjmp	.+4      	; 0x156 <get_key+0x94>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	28 30       	cpi	r18, 0x08	; 8
 158:	31 05       	cpc	r19, r1
 15a:	b4 f2       	brlt	.-84     	; 0x108 <get_key+0x46>
		//dir = (dir & 0xEF ) | out;
		//port = (port & 0xEF) | (~out & 0x10 );
		
		
		
	}
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
